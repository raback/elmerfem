name: act_test
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '**.nix'
      - 'flake.lock'
  pull_request:
    paths-ignore:
      - '**.nix'
      - 'flake.lock'

concurrency: act_test-${{ github.ref }}

jobs:

  ubuntu:
    # For available GitHub-hosted runners, see:
    # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: ${{ matrix.os }}

    name: ${{ matrix.os }} (${{ matrix.compiler }} ${{ matrix.mpi }} MPI ${{ matrix.openmp }} OpenMP)

    strategy:
      # Allow other runners in the matrix to continue if some fail
      fail-fast: false

      matrix:
        os: [ubuntu-24.04]
        compiler: [gcc]
        mpi: [with]
        openmp: [with]
        include:
          - os: ubuntu-24.04-arm
            compiler: gcc
            compiler-pkgs: "g++ gcc"
            cc: "gcc"
            cxx: "g++"
            mpi: with
            openmp: without
            openmp-cmake-flags: "-DWITH_OpenMP=OFF"
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

    steps:
      - name: get CPU information
        run: lscpu

      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: install dependencies
        run: |
          sudo apt -qq update
          sudo apt install -y ${{ matrix.compiler-pkgs }} cmake gfortran \
            libopenblas-dev \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "libhypre-dev") \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "libopenmpi-dev libmumps-dev libparmetis-dev") \
            $([ "${{ matrix.compiler }}" == "gcc" ] && echo "libsuitesparse-dev") \
            $([ "${{ matrix.compiler }}" == "gcc" ] && [ "${{ matrix.mpi }}" == "with" ] && echo "librocalution-dev") \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "trilinos-all-dev libptscotch-dev") \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "libnetcdff-dev")

      - name: configure
        # CHOLMOD and rocALUTION require a working OpenMP package. So, disable them for clang.
        run: |
          # work around error in the rocALUTION CMake config file distributed by Ubuntu
          if [ "${{ matrix.compiler }}" == "gcc" ] && [ "${{ matrix.mpi }}" == "with" ]; then
            sudo sed -i '/find_dependency(HIP)/d' /usr/lib/$(dpkg-architecture -qDEB_HOST_MULTIARCH)/cmake/rocalution/rocalution-config.cmake
          fi
          mkdir ${GITHUB_WORKSPACE}/build
          cd ${GITHUB_WORKSPACE}/build
          cmake \
            -DCMAKE_BUILD_TYPE="RelWithDebInfo" \
            -DCMAKE_INSTALL_PREFIX="${GITHUB_WORKSPACE}/usr" \
            -DBLA_VENDOR="OpenBLAS" \
            ${{ matrix.openmp-cmake-flags }} \
            -DWITH_LUA=ON \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "-DWITH_Zoltan=OFF" || echo "-DWITH_Zoltan=OFF") \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "-DWITH_Mumps=OFF" || echo "-DWITH_Mumps=OFF") \
            $([ "${{ matrix.compiler }}" == "gcc" ] && echo "-DWITH_CHOLMOD=OFF" || echo "-DWITH_CHOLMOD=OFF") \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "-DWITH_Hypre=OFF -DHYPRE_INCLUDE_DIR=/usr/include/hypre" || echo "-DWITH_Hypre=OFF") \
            $([ "${{ matrix.compiler }}" == "gcc" ] && [ "${{ matrix.mpi }}" == "with" ] && echo "-DWITH_ROCALUTION=OFF" || echo "-DWITH_ROCALUTION=OFF") \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "-DWITH_ElmerIce=OFF" || echo "-DWITH_ElmerIce=OFF") \
            -DWITH_ELMERGUI=OFF \
            -DWITH_VTK=OFF \
            -DWITH_OCC=OFF \
            -DWITH_MATC=OFF \
            -DWITH_PARAVIEW=OFF \
            -DCREATE_PKGCONFIG_FILE=ON \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "-DWITH_MPI=ON -DMPI_TEST_MAXPROC=2 -DMPIEXEC_PREFLAGS=--allow-run-as-root" || echo "-DWITH_MPI=OFF") \
            $([ "${{ matrix.mpi }}" == "with" ] && echo "-DWITH_Trilinos=OFF" || echo "-DWITH_Trilinos=OFF") \
            ..

      - name: build
        run: |
          cd ${GITHUB_WORKSPACE}/build
          cmake --build . -j$(nproc)

      - name: install
        run: |
          cd ${GITHUB_WORKSPACE}/build
          cmake --install .

      - name: check
        id: run-ctest
        timeout-minutes: 150
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        run: |
          cd ${GITHUB_WORKSPACE}/build
          ctest . \
            -LE slow \
            -j$(nproc) \
            --timeout 300

      - name: Re-run tests
        if: always() && (steps.run-ctest.outcome == 'failure')
        timeout-minutes: 60
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        run: |
          cd ${GITHUB_WORKSPACE}/build
          # get names of failed tests and strip potential "_np*" suffix
          failed_tests=($(ctest . -N --rerun-failed | grep -E "Test\s+#.*" | awk '{print $3}' | sed -e 's/_np[0-9]*$//g'))
          # remove duplicate test names
          unique_failed_tests=($(echo "${failed_tests[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
          for test in "${unique_failed_tests[@]}"; do
            # check if test is from fem or ElmerIce
            if [ -d fem/tests/${test} ]; then
              test_root=fem/tests
            else
              test_root=elmerice/Tests
            fi
            echo "::group::Content of ${test_root}/${test}"
            echo ---- Files ----
            ls -Rl ${test_root}/${test}
            if [ -f ${test_root}/${test}/test-stderr*.log ]; then
              err_logs=($(ls ${test_root}/${test}/test-stderr*.log))
              for err_log in "${err_logs[@]}"; do
                echo ---- Content of ${err_log} ----
                cat ${err_log}
              done
            fi
            if [ -f ${test_root}/${test}/test-stdout*.log ]; then
              out_logs=($(ls ${test_root}/${test}/test-stdout*.log))
              for out_log in "${out_logs[@]}"; do
                echo ---- Content of ${out_log} ----
                cat ${out_log}
              done
            fi
            echo "::endgroup::"
          done
          echo "::group::Re-run failing tests"
          ctest --rerun-failed --output-on-failure --timeout 180 || true
          echo "::endgroup::"
          echo "::group::Log from these tests"
          [ ! -f Testing/Temporary/LastTest.log ] || cat Testing/Temporary/LastTest.log
          echo "::endgroup::"
